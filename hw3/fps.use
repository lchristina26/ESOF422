model FPS

enum WT {sg, ar, pl}

class FPS
attributes
    canDefeat:Boolean
    currHealth:Integer
    weapon:WT
    ps : PlayerState
    neutralState : PlayerState
    attackState : PlayerState
    panicState : PlayerState
    dieState : PlayerState

operations
    initInstance()
        begin
            self.weapon := WT::sg;
            self.currHealth := 1;
            self.canDefeat := true;
            self.neutralState := new Neutral;
            self.attackState := new Attack;
            self.panicState := new Panic;
            self.dieState := new Die;
            self.ps := self.neutralState;
        end
    seeOpponent(defeat:Boolean)
        begin
            self.ps.seeOpponent(defeat);
        end
    loseOpponent()
        begin
            self.ps.loseOpponent();
        end
    receiveBlow(weapon:WT)
        begin
            self.ps.receiveBlow(weapon);
        end
    statemachines
        psm StatePattern
            states
                startUp:initial
                neutral  [ps = neutralState]
                attack   [ps = attackState]
                panic    [ps = panicState]
                die      [ps = dieState]
            transitions
                startUp -> neutral {create}
                neutral -> attack { [defeat=true and ps = neutralState] seeOpponent() }
                neutral -> panic { [defeat=false and ps = neutralState] seeOpponent() }
                attack -> die { [weapon=WT::sg or weapon=WT::ar or weapon=WT::pl and currHealth= 0 and ps = attackState] receiveBlow() }
                attack -> neutral { [ps = attackState] loseOpponent() }
                panic -> die { [weapon=WT::sg or weapon=WT::ar or weapon=WT::pl and currHealth= 0 and ps = panicState] receiveBlow() }
                panic -> neutral { [ps = panicState] loseOpponent() }
        end
end

abstract class PlayerState
operations
    seeOpponent(defeat:Boolean)
        begin
        end
    loseOpponent()
        begin
        end
    receiveBlow(weapon:WT)
        begin
        end
end

class Neutral < PlayerState
operations
    seeOpponent(defeat:Boolean)
        begin
            if defeat then
                self.fPS.ps := self.fPS.attackState;
            end;
            if not defeat then
                self.fPS.ps := self.fPS.panicState;
            end;
        end
    loseOpponent()
        begin
        end
    receiveBlow(weapon:WT)
        begin
        end
end 

class Attack < PlayerState
operations
    seeOpponent(defeat:Boolean)
        begin
        end
    loseOpponent()
        begin
            self.fPS.ps :=  self.fPS.neutralState;
        end
    receiveBlow(weapon:WT)
        begin
            if weapon = WT::sg then
                self.fPS.currHealth := self.fPS.currHealth - 2;
            end;
            if weapon = WT::ar then
                self.fPS.currHealth := self.fPS.currHealth - 3;
            end;
            if weapon = WT::pl then
                self.fPS.currHealth := self.fPS.currHealth - 1;
            end;
            if self.fPS.currHealth <= 0 then
                self.fPS.ps := self.fPS.dieState;
            end;
        end
end 

class Panic < PlayerState
operations
    seeOpponent(defeat:Boolean)
        begin
        end
    loseOpponent()
        begin
            self.fPS.ps :=  self.fPS.neutralState;
        end
    receiveBlow(weapon:WT)
        begin
            if weapon = WT::sg then
                self.fPS.currHealth := self.fPS.currHealth - 2;
            end;
            if weapon = WT::ar then
                self.fPS.currHealth := self.fPS.currHealth - 3;
            end;
            if weapon = WT::pl then
                self.fPS.currHealth := self.fPS.currHealth - 1;
            end;
            if self.fPS.currHealth <= 0 then
                self.fPS.ps := self.fPS.dieState;
            end;
        end
end 

class Die < PlayerState
operations
    seeOpponent(defeat:Boolean)
        begin
        end
    loseOpponent()
        begin
        end
    receiveBlow(weapon:WT)
        begin
        end
end 


class Weapon
attributes
    wType:WT
    ammoAmount:Integer
operations
    shoot()
        begin
          self.ammoAmount := self.ammoAmount - 1;
        end
    reload(bullets:Integer)
        begin
            self.ammoAmount := self.ammoAmount + bullets;
        end
end

class Level
attributes
    atLevel:Integer
operations
    moveForward()
        begin
            self.atLevel := self.atLevel + 1;
        end
    moveBackward()
        begin
            if self.atLevel > 1 then
                self.atLevel := self.atLevel - 1;
            end;        
        end
end


--associations
association shooterState between
    PlayerState [1] role ps
    FPS [1] role fPS
end
--association shooterWeapons between
--    FPS [1] role shooter
--    Weapon [0..*] role weapons
--end
--association level between
--    FPS [1] role shooterLevel
--    Level [1..5] role levels
--end


    










